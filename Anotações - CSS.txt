Existem 3 maneiras de adicionar CSS ao HTML:
	Inline - quando os estilos são adicionados a um atributo especifico.
	Internal -  quando o CSS é adicionado na tag head.
	External - quando o CSS é adicionado através de um arquivo externo. É o melhor e mais utilizado.

Inline CSS
	style = "color:red;"
	 <h1 style="color:red;"> Mudar Apenas a Cor com Inline</h1> 
	 <h1 style="color:purple;font-size: 50px;border-bottom: 5px solid red;"> Mudar a cor e o tamanho</h1>
	 
	 
Internal CSS
	É uma técnica melhor que o inline, colocando todos os estilos na tag head.
	Deve-se criar uma tag <style> no head e ir adicionando as regras.

External CSS
	A forma ideal de adicionar estilos a um arquivo HTML.
	É necessário criar outro arquivo ".css" na pasta do projeto.
	Após criar, é necessário adicionar, na head, um comando de link para pegar o arquivo css e mesclar com o projeto: 
		<link rel="stylesheet" href="css/style.css">
	No arquivo exterior, é adicionado as regras da seguinte forma:
		h1{
		 color: red;
		}
	Desta forma, todos os h1 estarão vermelhos.

Ordem do CSS
	O CSS é carregado a partir de uma ordem, se temos os 3 estilos aplicados, ele segue a seguinte ordem:
		inline > internal = external > padrão do navegador.
	Interno e externo têm a mesma prioridade, porém, a última regra prevalece.

Múltiplos Arquivos CSS
	É uma boa prática criar vários arquivos de CSS, pois facilita a divisão do CSS por páginas.
	Deve-se importar todos os arquivos na head, e o último a ser importado, vai ter prioridade nas regras de estilo.

Comentários no CSS
	São utilizados com /*[...]*/
		/* Comentário */

Classes e IDs
	São utilizadas para especificar elementos específicos para os atributos.
	IDs são utilizados para elementos únicos na página.
	Classes servem para um ou mais elementos, geralmente utilizadas em conjuntos de elementos.

Classes
	São inseridos através do HTML
	Desta forma, no css, quando alterarmos a classe, todos os atributos que possuem a mesma classe irão herdar do mesmo estilo.
	Comando:
		p.nome_classe + TAB = <p class = "nome_classe"> - no HTML.
		.nome_classe{ - no CSS.
		
IDs
	Também inseridos através do HTML.
	Ele é único, não se repete na mesma página.
	Comando:
		p#nome_id + TAB = <p id="nome_id">.
		#nome_id { - no CSS.

Ordem dos Seletores
	Se uma tag estiver com id e uma classe ao mesmo tempo, a prioridade segue na seguinte ordem: 
		id > class > seletor de tag.
	O id terá prioridade, porém regras que não se conflitam, irão funcionar normalmente.

Cores no CSS
	Podem ser definidas em nomes ou códigos hexadecimais (RGB).
	color: ctrl + espaço = mostra a lista de cores.
	Em hexadecimal, #000 é a cor preta e #FFF é a cor branca.
	Em hexadecimal, #aa55ff é a mesma coisa que #a5f.
	#RRGGBB - os dois primeiros representam o vermelho, depois verde e depois azul.
	background-color: blue; --> altera o plano de fundo no atributo.
	
	
RGBa
	Representa a opacidade.
	color: rgb(0, 0, 255,0.5); --> um azul transparente, opaco.
	
Background-Opacity
	Também é possível deixar a cor do background opaca:
		background-color: green;
		opacity: 0.2;
	Porém a forma mais fácil:
		background-color: rgba(0,0,255,0.5);
		color: #0000;

Background-Image
	Coloca uma foto de fundo para o site.
	background-image: url("..\local-da-foto");
	o ".." serve para voltar uma pasta para trás.

Centralizando uma Imagem de Background
	As vezes a imagem é muito maior que o elemento que estamos inserindo.
	Isto pode ser feito com duas regras: 
		background-position: center.
		background-size: cover;
		
Dar regras a mais de um elemento no CSS
	.elemento-1,
	.elemento-2{
		color:red;
	}
	
Box Model
	É um elemento muito importante do HTML.
	Consiste em quatro partes: altura e largura, padding, border e margin.

Height and Width
	São a base do box model, estas propriedades consistem no conteúdo do elemento.
	Podemos alterar as duas e mudar o tamanho do elemento na tela.
	Alguns elementos do HTML já vem com 100% de largura.
	Caso um elemento nao 	possua width declarada, ele irá ocupar toda a linha horizontal.

Padding
	É o espaçamento entre o conteúdo e a borda do elemento, seria o espaçamento interno.
	É um recurso utilizado para criar uma distância entre o conteúdo (texto) e a extremidade do elemento.
	Podemos adicionar o padding aos lados individuais de um elemento:
		padding-top, padding-right, padding-bottom ou padding-left.
	Ou então, podemos adicionar utilizando apenas uma linha, com o shorthand:
		padding: 5px 10px 15px 20px;
		padding: top,right,bottom,left --> a ordem dos comandos.
	É possível resumir a regra:
		padding: 10px 20px -> isto significaria a mesma coisa que "padding: 10px 20px 10px 20px" padding: topos - lados;
		padding: 10px; --> Aplica para todos os lados, seria o equivalente a padding: 10px 10px 10px 10px;
		

Padding e Width
	Padding é adicionada a largura do elemento, e pode dar problema.
	Um elemento com 200px de width e 25px de padding tem um tamanho total de 250px na horizontal.
	A regra "box-sizing: border-box" faz o elemento respeitar o tamanho que está em width.
	
Border
	A borda é o elemento central, e fica entre o padding e margin.
	Padding é o espaçamento interno e margin o externo.
	Esta regra geralmente é utilizada como propósito decorativo.
	A regra de border é definida em algumas partes: tamanho, aspecto e cor da borda:
		border: 5px solid red;
	Também pode ser adicionada de formas individuais.
		border-top,border-right,border-bottom,border-left.
	A borda pode ser arredondada, com o comando "border-radius":
		border-radius: 5px;
		border-radius pode ser aplicada mesmo sem um "border" sendo aplicado anteriormente no elemento.

Margin
	A propriedade margin é responsável pelo espaçamento externo do elemento.
	Podemos aplicar as regras nela na mesma forma que aplicamos no padding, seja individualmente ou shorthand.
	Se eu quiser uma distancia maior entre a linha de cima e o meu conteúdo, aplico margin-top.
	Se eu quiser uma distância maior entre o meu conteúdo e o limite esquerdo da tela, aplico o margin-left.

Unindo os elementos do Box-Model	
	Em alguns elementos, utilizaremos todas as propriedades do box-model.
	Em resumo, eles são:
		width e height - tamanho.
		padding - espaçamento interno.
		border - decorar o elemento com bordas.
		margin - afastar o elemento de outros (espaçamento externo).
		
Alinhamento de Texto
	Os textos podem ser alinhados em várias direções. Por padrão, ele é alinhado à esquerda.
	Com a regra "text-align", configuramos center ou right para alterar o valor padrão.
	Também funciona para alinhar imagens.
	É muito comum utilizar o valor "center":
		text-align: center;
		
Text Decoration
	Com a decoration, podemos adicionar efeitos ao texto, como sublinhar, cortar e colocar em itálico ou em negrito:
		text-decoration: underline; --> põe sublinhado.
		text-decoration: none; --> tira o a decoração de tags que já possuem uma, como a tag "a" que vem com um underline embaixo do link, por exemplo.

Text Transform
	Com a text-transform, podemos alterar como o texto é exibido. Pode ser alterado para uppercase ou lowercase.
	O CSS deve ser aplicado quando queremos texto em uppercase.
	NUNCA escrever o texto com Caps Lock no HTML.
	Comando:
		text-transform: upper;
		text-transform: lower;
	
Espaçamento Entre Letras
	Com a "letter-spacing" podemos alterar o espaçamento entre as letras de um texto.
	Comando:
		letter-spacing: 5px;

Fontes
	Com o CSS, é possível alterar o tipo da fonte, com a regra "font-family".
	As disponíveis são: Serif, Sans-serif, Monospace, Cursive e Fantasy.
	Todos os navegadores têm várias fontes que podemos utilizar.
	E ainda podemos adicionar fontes externas com o Google Fonts, por exemplo.
		Comando:
			font-family: sans-Serif;
	Também é possível mudar o aspecto das letras com a regra "font-style".
	Os valores são: normal,italic e oblique. Normal é o padrão.
	Oblique seria o itálico, porém com pequenas diferenças.
		Comando:
			font-style: italic;
	Com o comando font-weight, é possível deixar a fonte mais fina ou mais grossa. Seria o semelhante a colocar em negrito.
	Os valores vão de 100 a 900, sendo 100 o mais fino.
	Algumas palavras também funcionam como valores, por exemplo: bold(600)
	Existem fontes que não tem todas as variações, e é necessário tomar cuidado com isso.
		Comando:
			font-weight: 100; 
			font-weight: 500;
	Font-size é a regra responsável por deixar a fonte pequena ou grande. É configurada com unidades de medida, como o px, além de outras.
	Quanto menor o valor, menor a fonte.
		Comando:
			font-size: 10px;
			
Display
	Em HTML e CSS, temos elementos que são considerados "de bloco" e outros "inline".
		Block - ocupa a linha toda. Os elementos quebram linha quando adiciona novos elementos em bloco.
		Inline - ficam um do lado do outro.
	A tag div é um exmeplo de block, e span um exemplo de inline.
	Com a regra "display", podemos mudar este comportamento, ou seja, deixar uma div como inline.
	Comando:
		display: inline-block; --> faz com que 3 conteúdos, que ocupam 3 linhas, ocupe apenas 1 linha e fiquem os 3 alinhados um do lado do outro.
		display:block; --> faz com que 3 conteudos, que ocupam 1 linha só, ocupem 3, e ficam um em cima do outro.
		display: none; --> esconde um elemento. Ele não é excluído, apenas some.	
		
Posições dos Elementos
	A regra position e seus valores são responsáveis por posicionar o elemento na tela.
	Recebe valores como "relative,fixed,absolute,sticky" e mais.
	O valor padrão é o static.
	É essencial quando precisamos mudar o local onde o elemento deve ficar no projeto.

Position Static
	Não faz nada com o elemento, é o valor padrão. Todo elemento já possui essa posição.
	É redundante atribuit um elemento com este valor.
	Static não é afetado por regras como top,right,bottom e left (top:10px, por exemplo).
	Static segue apenas o fluxo do HTML.
	Comando:
		position: static;

Position Relative
	Na relative, as regras de top,right,bottom e left movem o elemento pela tela.
	Também segue o fluxo do HTML.
	Normalmente, não se utiliza as regras de posição com relative.
	Risco de ficar na frente de outro elemento.
	Comando:
		position: relative;
		top: -62px; (É possível mover pra cima, se colocado negativamente o valor em px)

Position Absolute
	Com o valor absolute em position, o elemento pode ser movido pela tela toda.
	É possível quebrar o fluxo do HTML.
	Esta regra também é afetada pelo top,right,bottom e left. 
	Posicionar com absolute pode tanto ser uma solução como um problema.
	Ele vai pro topo absoluto da direção, por exemplo:
		top:1px; --> ele vai pro topo da pagina (esquerdo se nao especificar right)
		right:1px; --> ele vai pro fundo direito da página.
	Comando:
		position: absolute;

Relative com Absolute
	Podemos resolver o problema do absolute com o relative.
	Um elemento com absolute é ligado ao elemento mais próximo com posição relativa, se não, ele é ligado ao body.
	Um container com posição relativa é controlado melhor do que os com absolute.
	
Position Fixed
	Com fixed, o elemento pode ser fixado na tela.
	Mesmo após os scroll na página, o elemento permanece na mesma posição, estando sempre presente.
	O recurso é frequentemente utilizado para criar barra de navegação fixa.
	Ele fica fixo e mesmo dando scroll pra baixo ou pra cima, ele não se mexe.
	Comando:
		position: fixed;
		top: 50px; --> sem declarar onde ele vai ficar, ele não aparece.
		right: 50px;
		
Position Sticky
	Sticky também faz o elemento fixar na tela, mas quando ele volta para a sua posição original, ele se comporta como relative.
	A posição do elemento é onde ele foi inserido no HTML.
	Ele vai se mover junto com a tela, e só gruda na tela quando passa o scroll.
	Comando:
		position:sticky;
		top:10px; --> também precisa ser declarado.
		right:10px;
		
Z Index 
	Se temos dois elementos com as mesmas posições ou se eles colidem na página, podemos escolher qual será exibido.
	O elemento com maior valor prevalece.
	Utilizar valores baixos para esta regra.
	Comando:
		z-index: 1; 
		z-index:3; --> esse vai prevalecer, pois é o maior
		z-index:2; 
		
